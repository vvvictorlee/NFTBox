{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "erc721",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "Executed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "erc721",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "Plundered",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "erc721",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "computeAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "erc721",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct LootBox.Call[]",
						"name": "calls",
						"type": "tuple[]"
					}
				],
				"name": "executeCalls",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lootBoxInstance",
				"outputs": [
					{
						"internalType": "contract LootBox",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "erc721",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "contract IERC20Upgradeable[]",
						"name": "erc20s",
						"type": "address[]"
					},
					{
						"components": [
							{
								"internalType": "contract IERC721Upgradeable",
								"name": "token",
								"type": "address"
							},
							{
								"internalType": "uint256[]",
								"name": "tokenIds",
								"type": "uint256[]"
							}
						],
						"internalType": "struct LootBox.WithdrawERC721[]",
						"name": "erc721s",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "contract IERC1155Upgradeable",
								"name": "token",
								"type": "address"
							},
							{
								"internalType": "uint256[]",
								"name": "ids",
								"type": "uint256[]"
							},
							{
								"internalType": "uint256[]",
								"name": "amounts",
								"type": "uint256[]"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct LootBox.WithdrawERC1155[]",
						"name": "erc1155s",
						"type": "tuple[]"
					}
				],
				"name": "plunder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Brendan Asselstine",
			"kind": "dev",
			"methods": {
				"computeAddress(address,uint256)": {
					"details": "The contract will not exist yet, so the Loot Box address will have no code.",
					"params": {
						"erc721": "The address of the ERC721",
						"tokenId": "The ERC721 token id"
					},
					"returns": {
						"_0": "The address of the Loot Box."
					}
				},
				"constructor": {
					"details": "Creates a new LootBox instance and an associated minimal proxy."
				},
				"executeCalls(address,uint256,(address,uint256,bytes)[])": {
					"details": "The Loot Box will be counterfactually created, calls executed, then the contract destroyed.",
					"params": {
						"calls": "The array of call structs that define that target, amount of ether, and data.",
						"erc721": "The ERC721 address",
						"tokenId": "The ERC721 token id"
					},
					"returns": {
						"_0": "The array of call return values."
					}
				},
				"plunder(address,uint256,address[],(address,uint256[])[],(address,uint256[],uint256[],bytes)[])": {
					"details": "A Loot Box contract will be counterfactually created, tokens transferred to the ERC721 owner, then destroyed.",
					"params": {
						"erc1155s": "An array of struct defining ERC1155 tokens that should be transferred",
						"erc20s": "An array of ERC20 tokens whose entire balance should be transferred",
						"erc721": "The address of the ERC721",
						"erc721s": "An array of structs defining ERC721 tokens that should be transferred",
						"tokenId": "The ERC721 token id"
					}
				}
			},
			"title": "Allows users to plunder an address associated with an ERC721",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Executed(address,uint256,address)": {
					"notice": "Emitted when a Loot Box is executed"
				},
				"Plundered(address,uint256,address)": {
					"notice": "Emitted when a Loot Box is plundered"
				}
			},
			"kind": "user",
			"methods": {
				"computeAddress(address,uint256)": {
					"notice": "Computes the Loot Box address for a given ERC721 token."
				},
				"constructor": "Constructs a new controller.",
				"executeCalls(address,uint256,(address,uint256,bytes)[])": {
					"notice": "Allows the owner of an ERC721 to execute abitrary calls on behalf of the associated Loot Box."
				},
				"lootBoxInstance()": {
					"notice": "The instance to which all proxies will point"
				},
				"plunder(address,uint256,address[],(address,uint256[])[],(address,uint256[],uint256[],bytes)[])": {
					"notice": "Allows anyone to transfer all given tokens in a Loot Box to the associated ERC721 owner."
				}
			},
			"notice": "Counterfactually instantiates a \"Loot Box\" at an address unique to an ERC721 token.  The address for an ERC721 token can be computed and later plundered by transferring token balances to the ERC721 owner.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"lootbox/contracts/LootBoxController.sol": "LootBoxController"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"lootbox/contracts/LootBox.sol": {
			"keccak256": "0x3f58972fe3977982248ec0938a7f77cb673390d91d602048a31ced1e77a2e390",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb90cab473e1e77a2927e6654003f04b49effc16ee52e1c205513b76ce178a97",
				"dweb:/ipfs/QmakX4gbqG9of9ZG9CgiGvyFan2yUwWbPG1wmaM1JruGXg"
			]
		},
		"lootbox/contracts/LootBoxController.sol": {
			"keccak256": "0xbc7ff60bff3c96707a50bc8248e201efe4eab8296d07095543a7339c4bf8cc06",
			"license": "MIT",
			"urls": [
				"bzz-raw://048d3065bb94671e2cf65e03bc96c72966e8d484d6c5d4b03c5ad9805c5a9ad0",
				"dweb:/ipfs/QmUnrz48U5iFabrc3NksWTmaosNMLBnzw8HxtTDfqhxex2"
			]
		},
		"lootbox/contracts/external/pooltogether/MinimalProxyLibrary.sol": {
			"keccak256": "0x4e3478d45138b064409b3702e2a49c263bae633172b513f6db6f2c39132edda9",
			"license": "MIT",
			"urls": [
				"bzz-raw://f89b320d37210d205341d14403e67e97efb6a78735b67789dcb9b5422c05abd7",
				"dweb:/ipfs/QmNnRFooYAcgAKq2M3zwr5ZkiC1on1LPiXmPwEteMyzcaA"
			]
		},
		"openzeppelin-contracts-upgradeable/contracts/introspection/IERC165Upgradeable.sol": {
			"keccak256": "0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524",
			"license": "MIT",
			"urls": [
				"bzz-raw://359411cc44a4499f37d46562ef3f348db443f9a699138c1797264d20b14697b7",
				"dweb:/ipfs/QmUmeQNUwve4MFCc1ace6zMnstqa8S9SZe1nXG9THcpQ5v"
			]
		},
		"openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol": {
			"keccak256": "0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac",
			"license": "MIT",
			"urls": [
				"bzz-raw://45ee9cb5a548db9a3805b934f995770272583ef6c0abd31aeffb7bd1f4c2f696",
				"dweb:/ipfs/QmcHGENdTcAzU6NuaoJWgMDA2rH1JdCWJf2EXRnSE967Qw"
			]
		},
		"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol": {
			"keccak256": "0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9",
			"license": "MIT",
			"urls": [
				"bzz-raw://2cbeb499bad52667b96dd7df8e9b1f583e8c07afaba0018a75e5b7ff6e777173",
				"dweb:/ipfs/QmPLJnuhEcWnpmhMHKsiuVHVxMwb5k6idYyjajbrtZLz5B"
			]
		},
		"openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol": {
			"keccak256": "0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff",
			"license": "MIT",
			"urls": [
				"bzz-raw://ecc8ae8f1f85e11b6f749e147ac298d1d66879f3bfe3d4518b919f7b6151a73b",
				"dweb:/ipfs/QmYXZfcnCd1N1AaxUTfNQjNHJXAAfVGvae6Bte1SfTCKEz"
			]
		},
		"openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol": {
			"keccak256": "0xa74666c992a3899fee9ae3b69ef08988e1d2b4f3a2d7f1544e821a3d4107412c",
			"license": "MIT",
			"urls": [
				"bzz-raw://6ae50d5a24eac6b0277ead2de7c3ccd85072240c7cffada100a71b71179ce1c1",
				"dweb:/ipfs/QmebdG3JP4Vj2Qpft9QwP6EuJkvjbX5HCetZKczsZUdxTR"
			]
		}
	},
	"version": 1
}